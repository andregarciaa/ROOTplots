General comment: ALWAYS put a docstring (https://www.python.org/dev/peps/pep-0257/)
                 whenever you define a function. The  main idea is to keep
                 a simple description of what function does, the input
                 arguments the function needs, and what it returns (if any)
                 Q0. Define what is a docstring.


#L4     : It is better to split in different lines the import statements
          Take a look to https://www.python.org/dev/peps/pep-0008/
          within "Imports" section. 
          Note that PEP-8 is the style guide for coding python, which
          is a good adviser, not mandatory, of how you should code. 
          I would recommend you to take note of the link and keep it 
          with you ...

#L22    : Function read_path. Create a dictionary to gather the file names
          and organize them by sensor name and run number. This dictionary
          will be the returned by the function.
          Q1. Create a dictionary relating the name of all elementary 
              particles with its charge (0,-1, or +1)
              Hint: https://docs.python.org/2.7/tutorial/datastructures.html
              Under 5.5. Dictionaries

#L55    : Function process.
          Q2. What is a package? (Trick: https://docs.python.org/2.7/tutorial/modules.html)

          Q3. What is the name of the package to use ROOT in python? 
          Q3.1. If you want to use it, what should you do in your code?

          Q4. How is it instantiated a ROOT file? 
          Q4.1. What is the difference of an instance and a class?

          Q5. How is it retrieved an existing object inside a ROOT file? 
          Q51.1. Write down the line needed to extract and instantiate the 
              TTree "alibava_clusters" from any of the 
              "*_beam_analysis_cluster.root" files
          
          Q6. Check the package https://github.com/duartej/postproc-alibava/
              and look for a function which can obtain the time window from 
              a TTree. Write down the lines of code needed to use it, and use it
              to obtain the time window of: 
              '/eos/user/d/duarte/alibavas_data_root/N1-3_0_b1/run000393/393_2017-05-21_17-48_gerva_MB2_N1-3_-50V_-76d0uA_-25C_lat132_beam_analysis_cluster.root'
              Hint: Check under alibavaSkifftools folder
                    If you don't have installed the package, you should do it
          
          Q7. List the names of the ROOT class that defines histograms, functions
              and Graphs (in 1Dimension), and instantiate in python code.
          Q7.1. Identify each case with the right class to use (histogram, function or graph):
             a. The Landau fitted to a charge distribution
             b. The intensity (I) measured in a circuit given a voltage (v). Perform the measurement
                20 times using different 20-voltages.
             c. The charge of reconstructed clusters in a depleted semiconductor 
                sensor, which was iluminated by MIPs in a test-beam
          
          Q8. Obtain the calibrated charge distribution from the sensor N1-3_0_b1, 
              run 393 applying the proper time window cut and a common mode cut 
              (no more than 20 ADC). Write down the lines of code needed to obtain the plot
              in a python interpreter.
          Q8.1. Fit the obtained distribution to a Landau*Gaus function. Write down 
              the python code.
              (You can use the Landau-gaus function placed in the 
              postproc-alibava package, check in the alibavaSkifftools.analysis_function 
              module, the landau_gaus function and use it to build a TF1 function)
              WARNING: DIFFICULT PROBLEM
          Q8.2. Obtain the parameters of the fitted function and print out their 
              values, write down the python code



 
