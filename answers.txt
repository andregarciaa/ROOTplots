Q0. Define what is a docstring.
    - First statement of a module, function, class or method DEFINITION,
    which documents the code, giving information about what it is doing,
    which inputs requires, what it will return, etc.
    For a given "functionName", writing "print functionName.__doc__" is
    possible to see the docstring on screen during execution time.
[JDC] RIGHT. So, it is very important to USE IT. A good documentation
      is going to save you (or the you of the future) a lot of headaches
      --> DONE


Q1. Create a dictionary relating the name of all elementary particles
with its charge (0,-1, or +1). Hint (Under 5.5. Dictionaries):
https://docs.python.org/2.7/tutorial/datastructures.html
    - Creation and directly addition of keys with their respective values
     to the dictionary:
elementary_particles={'gluon':0, 'photon':0, 'neutrino':0, 'electron neutrino':0,\
'muon':-1, 'muon neutrino':0, 'tau':-1, 'tau neutrino':0,}

    - Addition of extra values at the end of the dictionary:
elementary_particles['electron']=-1
elementary_particles['higgs']=0
elementary_particles['W boson']=-1
elementary_particles['Z boson']=0
elementary_particles['graviton']=0

    - Note that the order in which you add keys and values to a dictionary
      is not necessary the same as the order in which they are located.
      Nevertheless, this is not important due to the fact that you access
      values through the name of the keys, not through the positions of
      the data inside the dictionary (this is the main difference between
      arrays and dictionaries).
[JDC] RIGHT. Perfect. Now let me complicate a bit: Q1.1


Q1.1. Create a dictionary (or many) to allow you to obtain a charge of a particle
by the kind of elementary particle (lepton or boson) and its name. Right now you 
are accessing only by its name.
      - Due to the big dictionary has only two keys, they are defined by hand, when
        instantiating this dictionary. The value of each key is a dictionary which
        is also instantiated here. I assume we have in memory the dictionary of Q1:

elementary_particles_2 = {"lepton":{}, "boson":{}}
for i in elementary_particles:
    if (i=="electron" or i=="muon" or i=="tau" or i=='electron neutrino' or \
    i=='muon neutrino' or i=='tau neutrino'):
        elementary_particles_2["lepton"][i] = elementary_particles[i]
    else:
        elementary_particles_2["boson"][i] = elementary_particles[i] 
[JDC] PERFECT. A comment, you forgot the foton :)
[AGA] Really? It appears in the boson list.
[JDC] mmm, yes, you're right!


Q2. What is a package? (Trick: https://docs.python.org/2.7/tutorial/modules.html)
    - It is a group of modules. It is a way of structuring Python’s module
    namespace by using “dotted module names”.
    If "cartera" and "reloj" are modules inside a big module called "persona",
    the way of accessing them would be like:
    persona.cartera
    persona.reloj
[JDC]  DONE


Q3. What is the name of the package to use ROOT in python?
    - The ROOT package in Python is called: ROOT
[JDC] DONE


Q3.1. If you want to use it, what should you do in your code?
      - In order to use it, write at the begining of the script or
      before the first line where the Pyhton package is used:
      import ROOT
[JDC] DONE


Q4. How is it instantiated a ROOT file?
    - In C++:
    TFile *MyFile = new TFile("File.root","NEW");
    - In Python:
    myfile = ROOT.TFile("file.root")
[JDC] DONE


Q4.1. What is the difference between an instance and a class?
      - A class is an abstract entity, generic, global, while an
      instance or object (instantiation of a class) is a particular
      case of a class, with concrete values for its variables.
      Example:
      Class = Person
      Object = Juan
[JDC] DONE


Q5. How is it retrieved (recuperar) an existing object inside a ROOT file?
    - Using the Get() method
[JDC] Actually it is not totally correct, (trick: check the signature of 
     the method)
[AGA] The Get() method is overloaded, there are several different signatures
      using this name. In this case, we need the Get(str) method, whose 
      input is a string (the object we want to take from the ROOT file).
[JDC] DONE


Q5.1. Write down the line needed to extract and instantiate the TTree
"alibava_clusters" from any of the "*_beam_analysis_cluster.root" files
       - Generic answer (write the complete name for a particular case):
       "*_beam_analysis_cluster.root".Get("alibava_clusters")
[JDC] You are using the method Get of a str object ("*_beam_analysis_cluster.root")
      which does not have a Get method
[AGA] We cannot take a string and get from it an object, we need first to 
      open the root file, which has that string as name, and save it in a 
      variable, from where we take the object:
import ROOT
file = ROOT.TFile("393_2017-05-21_17-48_gerva_MB2_N1-3_-50V_-76d0uA_-25C_lat132\
      _beam_analysis_cluster.root")
file.Get("alibava_clusters")
[JDC] DONE, be careful though not to use the word "file" which is reserved to
      python and to create a variable for the tree: 't=f.Get("alibava_clusters")'
[AGA] Corrected, I have added the full path of the root file:
import ROOT
rootfile = ROOT.TFile("/eos/user/d/duarte/alibavas_data_root/N1-3_0_b1/run000393/\
393_2017-05-21_17-48_gerva_MB2_N1-3_-50V_-76d0uA_-25C_lat132_beam_analysis_clu\
ster.root")
roottree = rootfile.Get("alibava_clusters")
[JDC] RIGHT --> DONE


Q6. Check the package https://github.com/duartej/postproc-alibava/ and look
for a function which can obtain the time window from a TTree. Write down the
lines of code needed to use it, and use it to obtain the time window of:
'/eos/user/d/duarte/alibavas_data_root/N1-3_0_b1/run000393/393_2017-05-21_17-48_\
gerva_MB2_N1-3_-50V_-76d0uA_-25C_lat132_beam_analysis_cluster.root'
Hint: Check under alibavaSkifftools folder. If you don't have installed the
package, you should do it
    - From alibavaSkifftools/python/analysis_functions.py script, the lines
      71-152 calculate the time window through the get_time_window() method:

[JDC] Erased innecesary lines. You copied-paste here the implementation of the
      get_time_window method, but what I'm asking is the lines of code you need
      to calculate the time window USING the get_time_window, so you have to 
      use it. To use a method, class, package that somebody else wrote, you 
      don't need to know exactly the implementations, but the INTERFACE methods,
      that's it WHAT they can do for you and HOW you can use them.
[AGA] If we work in the same directory where postproc-alibava repository has 
      been cloned, and in particular inside it, from /alibavaSkifftools/python, 
      which is the directory where the module we are going to use is stored, it
      is enough to write import analysis_functions. However, it is better to 
      NEVER work in the same place as the functions we are importing are!
      So, once the alibavaSkifftools package has been installed in its own 
      directory as ALL the installation steps demand, we just have to import 
      the module from the package: alibavaSkifftools.analysis_functions (without 
      its extension .py) in order to use the get_time_window() method 

import alibavaSkifftools.analysis_functions as an
import ROOT
# Open the ROOT file which contains the data:
rootfile = ROOT.TFile("/eos/user/d/duarte/alibavas_data_root/N1-3_0_b1/run000393/\
393_2017-05-21_17-48_gerva_MB2_N1-3_-50V_-76d0uA_-25C_lat132_beam_analysis_clu\
ster.root")
# Get from the ROOT file the tree we need:
roottree = rootfile.Get("alibava_clusters")
# Use the method to obtain the time window, giving it the tree and where to cut:
time_window = an.get_time_window(roottree,"eventTime")

      And the resulting time window after the execution of these lines is the following: 
      time_window = (9.3025, 13.3025)
[JDC] EXCELLENT!! --> DONE


Q7. List the names of the ROOT class that defines histograms, functions
and Graphs (in 1Dimension), and instantiate in python code.
    - TH1, TGraph, Draw(), TCanvas()
[JDC] There is errors: TH1 and TGraph are the virtual classes for histograms
      and graphs (what is a virtual class?), but Draw() is a METHOD not a class,
      and TCanvas is nothing to do with histograms, functions nor graphs (what is
      a TCanvas class?)
[AGA] - A virtual class is a class whose functions and member variables can be redefined
      in classes which inherit from it. It is a kind of very generic class.
      - TCanvas provides the white background where the plot is going to be created.
      It makes possible choosing special features of the plot before it is done, like
      the axis ranges.
[JDC] - Yes, then return to the original question.
[AGA] 1) Histogram: TH1 (abstract class or pure virtual class). Example of instantiation 
      with TH1F (inputs: data, title, number of bins, x_start, x_end):
calibrCharg=TH1F("cluster_calibrated_charge", "Calibrated charge distribution", 800000, 0, 80000)
      - If I want to check if this line works, I have created the following piece of code, which
      plots an empty histogram.......? :

import ROOT
from ROOT import TH1F
file = ROOT.TFile("/eos/user/d/duarte/alibavas_data_root/N1-3_0_b1/run000393/\
393_2017-05-21_17-48_gerva_MB2_N1-3_-50V_-76d0uA_-25C_lat132_beam_analysis_cluster.root")
calibrCharg=TH1F("cluster_calibrated_charge", "Calibrated charge distribution", 800000, 0, 80000)
calibrCharg.Draw()
[JDC] It plots an empty histogram because you did not fill anythin in it, you 
      just instantiated, with ... 800000 bins!!?? Check the constructor signature
      again. I don't understand why you instantiate a file for this exercise
      
         
      2) Graph: TGraph. Example of instantiation (arguments: int, x_array, y_array):
      gra = TGraph(n,volts,charges)
      - For checking if this line works, I have created the following piece of code, but it 
      neither works:

from ROOT import TGraph
n=20
volts=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]
charges=[20,31,42,53,64,75,86,97,108,119,130,141,152,163,174,185,196,217,228,239]
gra = TGraph(n,volts,charges)
[JDC] Look at the signature of a TGraph, you need "pointers" for the x and y
      instantiation. But python does not have the concept of pointer. However,
      you can use an array from the package "array" (usually this make the trick
      whenever you need pointers in python-ROOT):
import array
volts=array.array('f',[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])
charges=array.array('f',[20,31,42,53,64,75,86,97,108,119,130,141,152,163,174,185,196,217,228,239])
      Take a look to the TGraph.SetPoint method, which is the way of filling
      a TGraph when you use the emtpy constructor (or just giving the number
      of points). 

      3) Function: TF1. Example of instantiation (arguments: name for the function, title of
      the plot, initial_x, initial_y):
      function1 = TF1("cuadcos","cos(x)^2",0,10)
      - For checking if this line works, I have created the following piece of code:

from ROOT import TF1
function1 = TF1("cuadcos","cos(x)^2",0,10)
function1.Draw()
[JDC] RIGHT --> DONE 


Q7.1. Identify each case with the right class to use (histogram, function or graph):
   a. The Landau fitted to a charge distribution.
      - Function
   b. The intensity (I) measured in a circuit given a voltage (v). Perform the
   measurement 20 times using different 20-voltages.
      - Graph
   c. The charge of reconstructed clusters in a depleted semiconductor
   sensor, which was iluminated by MIPs in a test-beam.
      - Histogram
[JDC] RIGHT, done


Q8. Obtain the calibrated charge distribution from the sensor N1-3_0_b1, run 393
applying the proper time window cut and a common mode cut (no more than 20 ADC).
Write down the lines of code needed to obtain the plot in a python interpreter.
    - Last line is wrong... :
import ROOT
import alibavaSkifftools.analysis_functions as an
root_file = ROOT.TFile("/eos/user/d/duarte/alibavas_data_root/N1-3_0_b1/run000393/\
393_2017-05-21_17-48_gerva_MB2_N1-3_-50V_-76d0uA_-25C_lat132_beam_analysis_cluster.root")
root_tree = root_file.Get("alibava_clusters")
time_window = an.get_time_window(root_tree,"eventTime")
mint = float(time_window[0])
maxt = float(time_window[1])
root_tree.Draw("cluster_calibrated_charge", "mint<event_time and event_time<maxt")
[JDC] - WELL DONE except last line. Note you have an error on the name of the branch,
        event_time must be eventTime, and you are not doing anything inside the 2nd
        Draw argument string. You can use the 'format' method of a string
        to include the floats obtained (mint and maxt) into the 2nd argument of Draw:
        cut = "{0} < eventTime && {1} > eventTime".format(mint,maxt)
        root_tree.Draw("cluster_calibrated_charge",cut)
[AGA] - Correct solution (with better x range):
import ROOT
import alibavaSkifftools.analysis_functions as an
root_file = ROOT.TFile("/eos/user/d/duarte/alibavas_data_root/N1-3_0_b1/run000393/"\
"393_2017-05-21_17-48_gerva_MB2_N1-3_-50V_-76d0uA_-25C_lat132_beam_analysis_cluster.root")
root_tree = root_file.Get("alibava_clusters")
time_window = an.get_time_window(root_tree,"eventTime")
mint = float(time_window[0])
maxt = float(time_window[1])
cut = "{0} < eventTime && {1} > eventTime".format(mint,maxt)
root_tree.Draw("cluster_calibrated_charge>>(200,-0.5, 80000.5)",cut)
[JDC] DONE


Q8.1. Fit the obtained distribution to a Landau*Gaus function. Write down the python
code. (You can use the Landau-gaus function placed in the postproc-alibava package,
check in the alibavaSkifftools.analysis_functions module, the landau_gaus function and
use it to build a TF1 function).
WARNING: DIFFICULT PROBLEM
      - The landau_gaus(x,par) function, defined inside alibavaSkifftools.analysis_functions
        module, takes two inputs: an array with the data to be fitted, and other array 
        with the parameters (MPV, width of Landau density, total area, Gaussian smearing??), 
        I guess we should give an initial estimation of the parameters which will be 
        adjusted after some iterations, until the real ones are founded.
      - I assume the code from Q8 has been executed. Here I am plotting the not calibrated 
        charge distribution in order to use the TCanvas, which should be instantiated before 
        ploting. PROBLEMS with the fit and the use of TCanvas at last line:

from ROOT import TCanvas
# Open a white canvas where the plot is going to be shown:
can = TCanvas("can","", 700, 500)
# Plot with the convenient time cut:
root_tree.Draw("cluster_charge>>(200,-0.5, 200.5)",cut)
# Fit using to landau_gaus() method:
an.landau_gaus("cluster_charge",[60,10,60000,10])
[JDC] RIGHT. The help function should tell you how to use the function,
      but it is not (yet) (See however: https://github.com/duartej/postproc-alibava/blob/master/alibavaSkifftools/python/analysis_functions.py#L42)
      You can use some rough estimators you give the first values of the 
      parameters. For example, 
         - MPV -> use the peak of cluster_charge histogram
         - Landau Width  = Gauss smearing -> fit a gaussian 
         - Total Area -> the cluster_charge histogram integral (number of 
                         entries in the range of the histogram)


Q8.2. Obtain the parameters of the fitted function and print out their values, write
down the python code.
      -


Q9. What does the checkout do?
    - "In Git terms, a "checkout" is the act of switching between different versions 
      of a target entity. The git checkout command operates upon three distinct 
      entities: files, commits, and branches". This command gives the possibility
      of recovering and seeing old versions of the repository.
[JDC] DONE


Q10. What do you have to do when you want to stop having a file in the repository 
     (which previously was git add)?
     - Delete it and commit the deletion:
git rm file.dat
git commit -m "Remove file.dat."
[DONE]

